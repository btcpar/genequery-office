GENEQUERY OFFICE LICENSE TERMS
==============================


TERMS AND CONDITIONS

“This License” refers to version 3 of the GNU General Public License.
“Copyright” also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.
“The Program” refers to any copyrightable work licensed under this License. Each licensee is addressed as “you”. “Licensees” and “recipients” may be individuals or organizations.
To “modify” a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a “modified version” of the earlier work or a work “based on” the earlier work.
A “covered work” means either the unmodified Program or a work based on the Program.
To “propagate” a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.
To “convey” a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.
An interactive user interface displays “Appropriate Legal Notices” to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.


The “source code” for a work means the preferred form of the work for making modifications to it. “Object code” means any non-source form of a work.
A “Standard Interface” means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.
The “System Libraries” of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A “Major Component”, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.
The “Corresponding Source” for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.
The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.
The Corresponding Source for a work in source code form is that same work.

Basic permissions
All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.
You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.
Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.

Introduction to metAMOS

Metagenomic datasets prove challenging to assemble using traditional assembly pipelines designed for individual genomes. Using AMOS as a foundation, we have created a robust & easy-to-use metagenomic assembly pipeline that takes reads (FASTA,FASTQ,SFF) and assembles them into Unitigs (CABOG,NEWBLER,Minimus,SOAPdenovo), Contigs & Scaffolds (Bambus2) & ORFs (Glimmer MG, MetaGeneMark), and annotates results using Metaphyler and a graph-based propagation method. MetAMOS was designed with efficiency in mind and can run through tens of millions of reads in a few hours on a multi-core workstation with ample RAM.
Pipeline

    Preprocess: prep & filter reads
    Assemble: generate unitigs using selected assembler
    FindORFS: identify ORFS in unitigs/contigs
    FindRepeats: identify repetitive contigs/ORFS
    Scaffold: scaffold unitigs, output variant motifs & linearized scaffolds
    Abundance: using ORFS and marker genes, estimate abundance (phylum)
    FindScaffoldORFS: identify ORFs in scaffolds, compare to step 3
    Propagate: propagate Metaphyler results using assembly graph
    Classify: sort scaffolds by phylum
    Postprocess: generate all output files required for report generation

Integrated Software

    Ruffus http://www.ruffus.org.uk/examples/bioinformatics
    Goodstadt L: Ruffus: a lightweight Python library for computational pipelines. Bioinformatics 2010, 26:2778-2779.
    Preprocess
        FastQC http://www.bioinformatics.babraham.ac.uk/projects/fastqc/
        PrinSEQ http://prinseq.sourceforge.net/ Schmieder R and Edwards R: Quality control and preprocessing of metagenomic datasets. Bioinformatics 2011, 27:863-864
    Assemble
        AMOS/Minimus http://amos.sourceforge.net Sommer DD, Delcher AL, Salzberg SL, Pop M. Minimus: a fast, lightweight genome assembler. BMC Bioinformatics. 2007 Feb 26;8:64.
        CABOG http://wgs-assembler.sourceforge.net/ Miller JR, Delcher AL, Koren S, Venter E, Walenz BP, Brownley A, Johnson J, Li K, Mobarry C, Sutton G. Aggressive assembly of pyrosequencing reads with mates.Bioinformatics. 2008 Dec 15;24(24):2818-24. Epub 2008 Oct 24.
        Meta-IDBA http://i.cs.hku.hk/~alse/metaidba/ Peng Y, Leung HCM, Yiu SM, Chin FYL: Meta-IDBA: a de Novo assembler for metagenomic data. Bioinformatics 2011, 27:i94-i101.
        MetaVelvet http://metavelvet.dna.bio.keio.ac.jp/ Namiki T, Hachiya T, Tanaka H, Sakakibara Y: MetaVelvet : An extension of Velvet assembler to de novo metagenome assembly from short sequence reads. 2011.
        SOAPdenovo
        http://soap.genomics.org.cn/soapdenovo.html
        Li Y, Hu Y, Bolund L, Wang J: State of the art de novo assembly of human genomes from massively parallel sequencing data.Human genomics 2010, 4:271-277.
        SparseAssembler
        http://sites.google.com/site/sparseassembler/
        Ye C, Ma ZS, Cannon CH, Pop M, Yu DW. Exploiting sparseness in de novo genome assembly. BMC Bioinformatics. 2012 Apr 19;13 Suppl 6:S1.
        Velvet http://www.ebi.ac.uk/~zerbino/velvet/ Zerbino DR, Birney E. Velvet: algorithms for de novo short read assembly using de Bruijn graphs. Genome Res. 2008 May;18(5):821-9. Epub 2008 Mar 18.
        Velvet-SC http://bix.ucsd.edu/projects/singlecell/ Chitsaz H, Yee-Greenbaum JL, Tesler G, Lombardo MJ, Dupont CL, Badger JH, Novotny M, Rusch DB, Fraser LJ, Gormley NA, Schulz-Trieglaff O, Smith GP, Evers DJ, Pevzner PA, Lasken RL. Efficient de novo assembly of single-cell bacterial genomes from short-read data sets. Nature Biotechnology, vol. 29, no. 11, pp. 915-921 (2011)
    MapReads
        Bowtie http://bowtie.cbcb.umd.edu Langmead B, Trapnell C, Pop M, Salzberg SL. Ultrafast and memory-efficient alignment of short DNA sequences to the human genome. Genome Biol. 2009;10(3):R25. Epub 2009 Mar 4.
    FindORFS/FindScaffoldORFS
        FragGeneScan http://omics.informatics.indiana.edu/FragGeneScan/ Rho M, Tang H, Ye Y: FragGeneScan: predicting genes in short and error-prone reads. Nucleic Acids Research 2010, 38:e191-e191.
        Glimmer-MG http://www.cbcb.umd.edu/software/glimmer-mg/ D.R. Kelley, B. Liu, A. Delcher, M. Pop, S.L. Salzberg. Gene prediction with Glimmer for metagenomic sequences augmented by classification and clustering. Nucleic Acids Research 40:1 e9 (2012)
    Scaffold
        Bambus 2 http://sourceforge.net/apps/mediawiki/amos/index.php?title=Bambus2
        Koren S, Treangen TJ, Pop M. Bambus 2: scaffolding metagenomes. Bioinformatics. 2011 Nov 1;27(21):2964-71. Epub 2011 Sep 16.
    Abundance
        MetaPhyler
        http://www.cbcb.umd.edu/~boliu/metaphyler
        Liu B, Gibbons T, Ghodsi M, Treangen T, Pop M. Accurate and fast estimation of taxonomic profiles from metagenomic shotgun sequences. BMC Genomics. 2011
    Classify
        FCP,Naive Bayesian Classifier http://kiwi.cs.dal.ca/Software/FCP Macdonald NJ, Parks DH, Beiko RG. Rapid identification of high-confidence taxonomic assignments for metagenomic data. Nucleic Acids Res. 2012 Apr 24.
        PHMMER http://hmmer.janelia.org/ Eddy SR. Accelerated Profile HMM Searches. PLoS Comput Biol. 2011 Oct;7(10):e1002195. Epub 2011 Oct 20.
        PhymmBL http://www.cbcb.umd.edu/software/phymm/
        A. Brady and S. L. Salzberg. Phymm and PhymmBL: Phylogenetic Classification of Metagenomic Data with Interpolated Markov Models. Nature Methods Vol. 6, No. 9, pp. 673-676 (September 2009)
        PhyloSift http://phylosift.wordpress.com/
        BLAST http://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=Download
        Altschul SF, Gish W, Miller W, Myers EW, Lipman DJ. Basic local alignment search tool. J Mol Biol. 1990 Oct 5;215(3):403-10.
    Postprocess
        Krona http://sourceforge.net/p/krona/home/krona/
        Ondov BD, Bergman NH, Phillippy AM. Interactive metagenomic visualization in a Web browser. BMC Bioinformatics. 2011 Sep 30;12:385.
